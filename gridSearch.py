def gridSearch(G, P):
  rG=len(G)
  cG=len(G[0])
  rP=len(P)
  cP=len(P[0])
  rCount=0
  if rP > rG or cP > cG:
    return 'NO'
  i=0
  while i+rP<=rG:
    j=0
    while j+cP<=cG:
      if G[i][j] == P[0][0]:
        if semiGrid(i,j,G,P):
          return 'YES'
      j+=1
    i+=1
  return 'NO'

def semiGrid(i,j,G,P):
  rP=len(P)
  cP=len(P[0])
  k=0
  p=i
  while k<rP:
    l=0
    q=j
    while l<cP:
      if G[p][q] != P[k][l]:
        return 0
      l+=1
      q+=1
    k+=1
    p+=1
  return 1
    


print(gridSearch([
[4,0,0,4,5,3,5,9,2,1,2,6,5,6,0],
[1,1,4,2,1,3,1,3,3,0,9,8,6,9,2],
[4,7,4,3,8,6,0,8,2,8,7,9,6,4,8],
[5,2,2,3,5,6,9,5,1,1,8,9,1,6,9],
[8,8,7,1,0,9,4,5,0,4,8,7,4,9,6],
[2,5,2,8,0,2,6,3,3,3,8,8,7,8,2],
[5,0,2,7,7,1,4,8,4,9,6,6,7,4,8],
[0,7,5,9,7,5,2,0,7,6,9,3,7,8,0],
[5,1,1,7,9,9,7,8,9,5,6,2,8,0,6],
[4,0,4,0,0,7,4,5,4,2,7,2,5,0,4],
[5,4,9,0,4,3,8,0,9,9,1,6,0,8,0],
[9,6,2,4,1,0,8,0,9,5,3,4,8,1,1],
[4,4,5,8,9,3,5,2,3,7,3,3,4,7,5],
[7,6,8,7,0,5,3,0,3,2,1,4,1,7,4],
[6,5,0,6,2,9,2,7,0,8,8,7,1,6,0],
], [
[9,9],
[9,9],
]))
